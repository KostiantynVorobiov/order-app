version: '3.8'

services:
  orderapp:
    image: orderapp:latest
    container_name: orderapp
    build:
      context: ./orderapp
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/order_db
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=qwerty
      - SPRING_DATA_REDIS_HOST=redis

  db:
    image: postgres:15.14-alpine
    container_name: postgres-container
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: qwerty
      POSTGRES_DB: order_db
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d order_db" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis-container
    command: ["redis-server", "--maxmemory", "1gb", "--maxmemory-policy", "allkeys-lru"]
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 5

  test-scenario:
    image: test-scenario:latest
    container_name: test-scenario
    build:
      context: ./testScenario
    ports:
      - "8081:8081"
    depends_on:
      orderapp:
        condition: service_started
    environment:
      - ORDER_API_BASE_URL=http://orderapp:8080/